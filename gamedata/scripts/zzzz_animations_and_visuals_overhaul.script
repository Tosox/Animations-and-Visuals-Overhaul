--[[
	=====================================================================
	Addon        : Animations and Visuals Overhaul
	Link         : https://github.com/TosoxDev/Animations-and-Visuals-Overhaul
	Author       : Tosox
	Date         : 16.04.2023
	Last Edit    : 28.01.2024
	=====================================================================
--]]

local ini_eff = ini_file("items\\items\\animations_settings.ltx")

local enable_ea = nil
local exo_anims = nil

follow_up_anims = {}

--===========================================================================
--
-- Patch 'enhanced_animations.anim_prepare' to dynamically change the animation
--
--===========================================================================

orig_enhanced_animations_anim_prepare = enhanced_animations.anim_prepare
enhanced_animations.anim_prepare = function()
	local anim_id = animations_and_visuals_overhaul_mcm.get_current_anim_id(enhanced_animations.used_item)
	if (anim_id) and (anim_id ~= "default") then
		local anim_item = "avo_" .. enhanced_animations.used_item .. "_" .. anim_id
		local item_anm = ini_eff:r_string_ex(anim_item, "anm")
		if item_anm then
			enhanced_animations.used_item = anim_item
			enhanced_animations.anim_section = item_anm
		end
	end

	-- Check if exo animations are enabled
	if exo_anims then
		-- Check if actor has an outfit
		local outfit = db.actor:item_in_slot(7)
		if outfit then
			-- Check if outfit is an exo
			local hud_section = SYS_GetParam(0, outfit:section(), "player_hud_section", "")
			if string.find(hud_section, "exo$") then
				-- Check if animation for the item exists as exo variant
				local exo_item = enhanced_animations.used_item .. "_exo"
				local exo_anm = ini_eff:r_string_ex(exo_item, "anm")
				if exo_anm then
					enhanced_animations.used_item = exo_item
					enhanced_animations.anim_section = exo_anm
				end
			end
		end
	end

	-- Register followup animation
	local chained_list = ini_eff:r_list(enhanced_animations.used_item, "avo_chained")
	if chained_list then
		for _, anim_section in pairs(chained_list) do
			register_follow_up_animation(anim_section)
		end
	end
	
	orig_enhanced_animations_anim_prepare()
end

function register_follow_up_animation(obj_section)
	if (not obj_section) or (not ini_eff:r_string_ex(obj_section, "snd")) then
		printf("![AVO] ERROR: FDDA animation for '%s' does not exist", obj_section)
		return
	end
	table.insert(follow_up_anims, obj_section)
end

--===========================================================================
--
-- Patch 'enhanced_animations.call_my_slot_back' to allow chained animations
--
--===========================================================================

orig_enhanced_animations_call_my_slot_back = enhanced_animations.call_my_slot_back
enhanced_animations.call_my_slot_back = function()
	orig_enhanced_animations_call_my_slot_back()

	if #follow_up_anims > 0 then
		enhanced_animations.used_item = follow_up_anims[1]
		enhanced_animations.anim_section = ini_eff:r_string_ex(follow_up_anims[1], "anm")
		enhanced_animations.anim_prepare()
		table.remove(follow_up_anims, 1)
	end

	return true
end

--===========================================================================
--
-- Patch FDDAs 'itms_manager.actor_on_item_before_use' to check for AVO animation if FDDA has none
--
--===========================================================================

orig_itms_manager_actor_on_item_before_use = itms_manager.actor_on_item_before_use
itms_manager.actor_on_item_before_use = function(obj, flags)
	orig_itms_manager_actor_on_item_before_use(obj, flags)

	-- Check if AVO provides an animation if FDDA has none by default
	if (flags.ret_value) and (enhanced_animations.enable_animations) then
		local item_sec = obj:section()
		local anim_id = animations_and_visuals_overhaul_mcm.get_current_anim_id(item_sec)
		if (anim_id) and (anim_id ~= "default") then
			local anim_item = "avo_" .. item_sec .. "_" .. anim_id
			if ini_eff:r_string_ex(anim_item, "anm") then
				enhanced_animations.use_item(obj)
				flags.ret_value = false
			end
		end
	end
end

--===========================================================================

function on_option_change()
	exo_anims = animations_and_visuals_overhaul_mcm.get_config("general", "exo_anims")
	enable_ea = animations_and_visuals_overhaul_mcm.get_config("general", "enable_ea")
end

function on_game_start()
	RegisterScriptCallback("on_option_change", on_option_change)
	on_option_change()
end
