--[[
	=====================================================================
	Addon        : Animations and Visuals Overhaul
	Link         : https://github.com/TosoxDev/Animations-and-Visuals-Overhaul
	Author       : Tosox
	Date         : 05.02.2023
	Last Edit    : 25.01.2024
	=====================================================================
--]]

local defaults = {
	["general/enable_ea"] = true,
	["general/exo_anims"] = true
}

local ini_eff = ini_file("items\\items\\animations_settings.ltx")

_avo_anims = {}

function get_config(module, key)
	if ui_mcm then return ui_mcm.get("avo/" .. module .. "/" .. key) else return defaults[module .. "/" .. key] end
end

function split_avo_anim_section(string)
	-- Check if string starts with 'avo_'
	local _, avo_prefix_idx = string.find(string, "^avo_")
	if not avo_prefix_idx then
		return nil
	end

	-- Remove 'avo_' prefix from the string
	string = string.sub(string, avo_prefix_idx + 1, string.len(string))

	-- Get the group
	local _, group_idx = string.find(string, "_")
	if not group_idx then
		return nil
	end

	-- Extract and validate the group
	group = string.sub(string, 1, group_idx - 1)
	if (group ~= "food") and (group ~= "drink") and (group ~= "drug") and (group ~= "medical") then
		return nil
	end

	-- Remove the group from the string
	string = string.sub(string, group_idx + 1, string.len(string))

	-- Get the item section
	local _, item_idx = string.find(string, "(.*)_")
	if not item_idx then
		return nil
	end

	-- Extract the item section
	item = string.sub(string, 1, item_idx - 1)
	
	-- Remove the item section from the string
	string = string.sub(string, item_idx + 1, string.len(string))

	-- If the length of the string is zero no id was given
	if string.len(string) == 0 then
		return nil
	end

	-- The rest of the string is the id
	id = string

	return group, item, id
end

function collect_avo_anims()
	local avo_anims = {}
	ini_eff:section_for_each(function(section)
		-- Check if section matches the pattern
		local group, item, id = split_avo_anim_section(section)
		if (not group) or (not item) or (not id) then
			return
		end
		
		-- 'default' is reserved for the original FDDA animation
		if id == "default" then
			return
		end
		
		-- Check if the item exists in-game
		if not ini_sys:section_exist(item) then
			return
		end
		
		if not avo_anims[group] then
			avo_anims[group] = {}
		end
			
		if not avo_anims[group][item] then
			avo_anims[group][item] = {}
		end
			
		table.insert(avo_anims[group][item], id)
	end)
	return avo_anims
end

function on_mcm_load()
	-- Insert 'General' group
	local mcm_menu = {
		id = "avo", gr = {
			{
				id = "general", sh = true, gr = {
					{ id = "title", type = "slide", link = "ui_options_slider_mask", text = "ui_mcm_avo_title_general", size = { 512, 50 }, spacing = 20 },
					{ id = "enable_ea", type = "check", val = 1, def = defaults["general/enable_ea"] },
					{ id = "exo_anims", type = "check", val = 1, def = defaults["general/exo_anims"] }
				}
			}
		}
	}
	
	-- Collect all AVO animations defined in 'animations_settings.ltx'
	_avo_anims = collect_avo_anims()
	
	for group, items in pairs(_avo_anims) do
		-- Add slide for every group
		local group_opt = {
			id = group, sh = true, gr = {
				{ id = "title", type = "slide", link = "ui_options_slider_mask", text = "ui_mcm_avo_title_" .. group, size = { 512, 50 }, spacing = 20 }
			}
		}
		
		-- Add items of the group with a list widget
		for item, ids in pairs(items) do
			table.insert(group_opt.gr, {
				id = item, type = "list", val = 0, restart = false, text = item, content = {
					function()
						local list_content = {}
						
						-- Insert FDDA default option for the item
						table.insert(list_content, { "default", game.translate_string("default") })
						
						-- Insert available animation ids for the item
						for _, id in ipairs(ids) do
							table.insert(list_content, { id, game.translate_string(id) })
						end
						
						-- Return list of available animations
						return list_content
					end
				}
			})
		end
		
		-- Insert group menu into the MCM menu
		table.insert(mcm_menu.gr, group_opt)
	end

	return mcm_menu
end
