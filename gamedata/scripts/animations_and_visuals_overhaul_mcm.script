--[[
	=====================================================================
	Addon        : Animations and Visuals Overhaul
	Link         : https://github.com/TosoxDev/Animations-and-Visuals-Overhaul
	Author       : Tosox
	Date         : 05.02.2023
	Last Edit    : 28.01.2024
	=====================================================================
--]]

local defaults = {
	["general/enable_ea"] = true,
	["general/exo_anims"] = true
}

local ini_eff = ini_file("items\\items\\animations_settings.ltx")

_avo_anims = {}

function get_config(module, key)
	if ui_mcm then return ui_mcm.get("avo/" .. module .. "/" .. key) else return defaults[module .. "/" .. key] end
end

function get_current_anim_id(section)
	if ui_mcm then
		for group, items in pairs(_avo_anims) do
			for item, _ in pairs(items) do
				if section == item then
					return ui_mcm.get("avo/" .. group .. "/" .. section)
				end
			end
		end
	else
		-- TODO: implement defaults for non MCM users
		return nil
	end

	return nil
end

function collect_avo_anims()
	local avo_anims = {}
	ini_eff:section_for_each(function(section)
		-- Check if section matches the pattern
		local item_sec, id = string.match(section, "^avo_(.+)_(.+)")
		if (not item_sec) or (not id) then
			return
		end

		local category = ini_eff:r_string_ex(section, "avo_category")
		if not category then
			-- TODO: Crash game
			return
		end
		
		-- 'default' is reserved for the original FDDA animation
		if id == "default" then
			-- TODO: Crash game
			return
		end
		
		-- Check if the section exists in-game
		if not ini_sys:section_exist(item_sec) then
			-- TODO: Crash game
			return
		end

		-- Check if section already exists in a category
		for category, items in pairs(avo_anims) do
			for item, ids in pairs(items) do
				if item == item_sec then
					-- TODO: Crash game
					return
				end
			end
		end
		
		if not avo_anims[category] then
			avo_anims[category] = {}
		end
			
		if not avo_anims[category][item_sec] then
			avo_anims[category][item_sec] = {}
		end
			
		table.insert(avo_anims[category][item_sec], id)
	end)
	return avo_anims
end

function on_mcm_load()
	-- Insert 'General' category
	local mcm_menu = {
		id = "avo", gr = {
			{
				id = "general", sh = true, text = "ui_mcm_menu_avo_general", gr = {
					{ id = "title", type = "slide", link = "ui_options_slider_mask", text = "ui_mcm_avo_general_title", size = { 512, 50 }, spacing = 20 },
					{ id = "enable_ea", type = "check", val = 1, def = defaults["general/enable_ea"] },
					{ id = "exo_anims", type = "check", val = 1, def = defaults["general/exo_anims"] }
				}
			}
		}
	}
	
	-- Collect all AVO animations defined in 'animations_settings.ltx'
	_avo_anims = collect_avo_anims()
	
	for category, items in pairs(_avo_anims) do
		-- Add slide for every category
		local category_opt = {
			id = category, sh = true, text = "ui_mcm_menu_avo_" .. category, gr = {
				{ id = "title", type = "slide", link = "ui_options_slider_mask", text = "ui_mcm_avo_" .. category .. "_title", size = { 512, 50 }, spacing = 20 }
			}
		}
		
		-- Add items of the category with a list widget
		for item, ids in pairs(items) do
			table.insert(category_opt.gr, {
				id = item, type = "list", val = 0, restart = false, text = item, content = {
					function()
						local list_content = {}
						
						-- Insert FDDA default option for the item
						table.insert(list_content, { "default", game.translate_string("avo_default") })
						
						-- Insert available animation ids for the item
						for _, id in ipairs(ids) do
							table.insert(list_content, { id, game.translate_string("avo_" .. id) })
						end
						
						-- Return list of available animations
						return list_content
					end
				}
			})
		end
		
		-- Insert category menu into the MCM menu
		table.insert(mcm_menu.gr, category_opt)
	end

	return mcm_menu
end
